import requests
import json
import openai
from dotenv import load_dotenv
import os

# OpenAI APIのエンドポイント
API_URL = "https://api.openai.com/v1/chat/completions"
API_KEY = "sk-proj-wOzSaxV5graYXGOBHcnwT3BlbkFJ91ME3j1gM2IFH7RIAnoD"

# インタビューデータ
interview_data = """
"assistant"
"こんにちは。今日はお時間をいただきありがとうございます。まず、今何の作業をしているのか教えていただけますか？"
"user"
"モニターの監視をして、異常がないか見ている"
"assistant"
"なるほど、モニターの監視をして異常がないか確認しているんですね。この作業を行う際に、具体的にどのような行動をとっていますか？"
"user"
"色々見比べて、警告表示がないか探す"
"assistant"
"警告表示を探す際に、どの部分に注目していますか？具体的に何を見ているのでしょうか？"
"user"
"小さい文字だけど、赤いwarningが出るのでそれを見ています"
"assistant"
"その赤い警告表示を見つけたとき、最初にどんなことを感じたり考えたりしますか？"
"user"
"プラントの危険が脅かされていると思い焦る"
"assistant"
"その焦った気持ちを感じた後、次にどのような行動を取りますか？"
"user"
"今までの経験を呼び覚まして、とりあえず安全マニュアル通りに動く"
"assistant"
"その安全マニュアルに従って行動する際、具体的にどのような情報を必要としましたか？その情報はどこから得ていますか？"
"user"
"プラントの稼働の止め方、マニュアルや先輩からの教え"
"assistant"
"過去の経験に基づいて即座に判断し、安全マニュアル通りに行動されているんですね。では、実際にプラントの稼働を止める手順の中で、特に注意している…"
"user"
"とにかく安全第一"
"assistant"
"安全第一を常に心がけているんですね。ところで、作業を行う際、時間的な制約やプレッシャーはどれくらいありますか？急いで行動しなければならない場…"
"user"
"時間はないけど焦っていたら間違ってしまい危険物質が出る可能性もあるので焦らずやる"
"assistant"
"焦らずに落ち着いて行動することが重要だと理解していますね。それでは、最後に、プラントの監視や安全対応の中で特に役立つと感じる知識や情報源は何…"
"user"
"全部大切だけど、監視のところまで行くと、経験がものをいう気がするな"
"assistant"
"経験が本当に大切な役割を果たしているんですね。その経験を積むことで、どういった点が特に強く感じられるようになったのでしょうか？"
"user"
"俯瞰する力"
"assistant"
"俯瞰する力というのは、状況全体を一目で把握する力ということでしょうか？それがどのように役立っているのか、もう少し具体的に教えていただけますか…"
"user"
"重大な局面で、何が大切か見極める力"
"assistant"
"その重大な局面で何が大切か見極める力が重要なのですね。その力を養うために、特にどのような経験や訓練が役立ったと思いますか？"
"user"
"シミュレーション"
"assistant"
"シミュレーションを通じて、俯瞰する力や重要な判断をする力を身につけたんですね。そのシミュレーションで特に役立ったと感じる部分や、具体的な事例…"
"user"
"ないです！"
"assistant"
"短時間の中でも大切な情報をお聞かせいただき、ありがとうございました。プラントの安全を守るために重要な役割を果たしていることがよく分かりました…"
"""

# プロンプトの定義
prompt = (
    interview_data
    + "\nこのインタビューデータから、タスクにおける意思決定の認知プロセスを明らかにする認知タスク分析を行いたいです。"
    "そのため、以下の内容を要約してください。ひとつもなかったり、複数の内容が一つの項目にあっても構いません。\n"
    "1. 行動（内容、手順、日常性、時間的圧力など）\n"
    "2. 認知（気づき、感じたこと、手がかり、目標、可能性や必要性など）\n"
    "3. 情報（用いた経験や知識など）\n\n"
    "ただし、行動と認知と情報の要素の抽出も、以下のインタビューの目的やプローブを理解しながら行ってほしい。\n"
    "インタビューにおける指示は以下である。\n\n"
    "あなたはプラントの現場を取材するプロのインタビュアーです．以下の内容に基づいて、従業員に対してインタビューを行ってください。 \n"
    "インタビューは、認知タスク分析を行うためのものです。つまり、リアルタイムで従業員が取り組んでいるタスクにおける、認知プロセスを理解するためのデータをインタビューで集めることが目的です。\n"
    "認知タスク分析とは、熟練者や専門家が、タスクにおいて意識的、あるいは無意識的におこなう意思決定の認知プロセスを探るための手法です。\n"
    "インタビューでは、認知プロセスにおける**情報**と**認知**と**行動**について質問をしてください。\n"
    "ただし、RPDに基づき、また効果的に情報を引き出すために、CDM（Cognitive Dimensions of Notations）におけるプローブの手法や、"
    "インタビュー技法や心理学を用いてください。以下にそれぞれの説明をします。\n\n"
    "RPDは、人々が経験をどのように活用して意思決定を行うかを説明する認知モデルです。その内容は以下の通りです。\n"
    "1. 状況を典型的な経験に当てはめる\n"
    "2. その時に目標や手がかり、可能性などを認識する\n"
    "3. うまくいきそうな行動を選択する\n"
    "4. うまくいくかどうかを頭の中でシミュレーションする\n"
    "5. 行動を実行する\n"
    "CDM（Cognitive Dimensions of Notations）は、認知タスク分析の枠組みにおける、過去に発生した非日常的な事象に対して、"
    "専門家の判断や意思決定の側面を引き出すための回顧的なインタビュー手法です。しかし、今回は非日常的ではなく日常的な状況で行なわれているタスクを対象としたインタビューに用います。\n"
    "CDMにおけるプローブは、以下のようなものがあります。\n"
    "手がかり: 何を見て、聞いて、感じていたか？\n"
    "知識: この意思決定で使用した情報は何か？その情報はどのようにして得たのか？\n"
    "類似経験: 過去の経験を思い出したか？\n"
    "目標: その時の具体的な目標は何か？\n"
    "選択肢: 他にどのような行動の選択肢が考えられたか？\n"
    "根拠: どのようにしてこの選択肢が選ばれたのか？他の選択肢が拒否された理由は？何か規則があったか？\n"
    "経験: この意思決定を行う上で、どのような経験が必要だったか？\n"
    "支援: この意思決定が最善ではなかった場合、どのような知識、情報が役立ったか？\n"
    "時間的圧力: この意思決定にはどの程度の時間的圧力がかかっていたか？\n\n"
    "そして結果は、jsonで出力してください。出力の見本としては、以下の形です。\n"
    "{\n"
    '"action": {\n'
    '    "monitoring": "モニターの監視を行い、異常がないか確認している。",\n'
    '    "comparison": "画面の情報を見比べて、赤い警告表示がないか探している。"\n'
    "},\n"
    '"recognition": {\n'
    '    "threat_awareness": "赤い警告表示を見つけたとき、プラントの安全が脅かされていると感じる。",\n'
    '    "emotional_response": "異常を発見した際に焦りを感じるが、冷静に対応しなければならないと理解している。"\n'
    "},\n"
    '"information": {\n'
    '    "sources": "安全マニュアル、先輩の教え、過去のシミュレーションの経験。",\n'
    '    "critical_knowledge": "プラントの稼働停止手順や警告の対処方法。"\n'
    "}\n"
    "}\n"
)

# リクエストヘッダーとペイロードの設定
headers = {"Content-Type": "application/json", "Authorization": f"Bearer {API_KEY}"}

payload = {
    "model": "gpt-4",
    "messages": [{"role": "user", "content": prompt}],
    "max_tokens": 1500,
    "temperature": 0.2,
}

# APIリクエストの送信
response = requests.post(API_URL, headers=headers, json=payload)

# レスポンスの処理
if response.status_code == 200:
    result = response.json()
    extracted_data = result["choices"][0]["message"]["content"]
    print("抽出されたデータ:", extracted_data)
    # JSON形式としてファイルに保存する場合
    with open("extracted_data.json", "w", encoding="utf-8") as file:
        json.dump(extracted_data, file, ensure_ascii=False, indent=4)
else:
    print("エラー:", response.status_code, response.text)
